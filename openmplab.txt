I download the openmp.tar from the course website and use the scp command to
upload it to the linux server, then I decompress the it using the tar command. 

   $ scp openmplab.tar shiqiw@lnxsrv07.seas.ucla.edu:~ 
   $ tar -xvf openmplab.tar

I want to examine which functions take up the largest portion of the execution
time, so I compile the program with gprof enabled and get the following results. 

   $ make seq GPROF=1
   $ ./seq
   $ gprof seq
   
   Flat profile:
   
   Each sample counts as 0.01 seconds.
   %   cumulative   self              self     total           
   time   seconds   seconds    calls  ms/call  ms/call  name    
   73.59      0.61     0.61       15    40.72    41.42  func1
    7.24      0.67     0.06        1    60.08   104.70  addSeed
    6.64      0.73     0.06  5177344     0.00     0.00  rand2
    3.62      0.76     0.03       15     2.00     2.00  func2
    2.41      0.78     0.02       15     1.34     1.34  func4
    2.41      0.80     0.02        2    10.01    10.01  init
    2.41      0.82     0.02        1    20.03    20.03  imdilateDisk
    1.21      0.83     0.01                             filter
    0.60      0.83     0.01       15     0.33     0.33  rand1
    0.00      0.83     0.00   983042     0.00     0.00  round
    0.00      0.83     0.00   491520     0.00     0.00  findIndexBin
    0.00      0.83     0.00       16     0.00     0.00  dilateMatrix
    0.00      0.83     0.00       15     0.00     0.00  func3
    0.00      0.83     0.00       15     0.00     0.00  func5
    0.00      0.83     0.00        2     0.00     0.00  get_time
    0.00      0.83     0.00        1     0.00     0.00  elapsed_time
    0.00      0.83     0.00        1     0.00     0.00  fillMatrix
    0.00      0.83     0.00        1     0.00     0.00  func0
    0.00      0.83     0.00        1     0.00     0.00  getNeighbors
   
From the profile, func1 takes the largest portion of time, which should be the
function that we mainly work with to speed up the program. 

To begin with, we need to first record the original run time of the program.

   $ make seq
   $ ./seq
   
   FUNC TIME : 0.764179
   TOTAL TIME : 2.699159

I apply parallel programming with 20 threads to all the for loops in func0-5. I
choose 20 because it gives me the fastest func time. I also declare the 
firstprivate and private variables since I find the program run faster with 
those declarations. Then I compile and run the program again with OpenMP 
enabled. I also check that my output is correct.
	
   $ make clean
   $ make omp
   $ ./omp
   $ make check

   FUNC TIME : 0.052672
   TOTAL TIME : 1.947778

Since T1 = 0.764179 and T20 = 0.052672,
I get the speedup = T1/T20 = 14.508259, that is approximate 14.5x speedup.
Thus, I achieve the 3.5x speedup requirement in spec. 

In order to check memory leak, I compile the program again with memory tracing
enabled and check for memory leaks after a run.

   $ make clean
   $ make omp MTRACE=1
   $ ./omp
   $ make checkmem

Memory not freed:
-----------------
           Address     Size     Caller
0x0000000001643060   0x1620  at 0x7f6fac800869
0x0000000001644690     0xc0  at 0x7f6fac800869
0x0000000001644760     0xa8  at 0x7f6fac8008b9
0x0000000001644810    0x240  at 0x7f6facd30c25
0x0000000001644a60    0x240  at 0x7f6facd30c25
0x0000000001644cb0    0x240  at 0x7f6facd30c25
0x0000000001644f00    0x240  at 0x7f6facd30c25
0x0000000001645150    0x240  at 0x7f6facd30c25
0x00000000016453a0    0x240  at 0x7f6facd30c25
0x00000000016455f0    0x240  at 0x7f6facd30c25
0x0000000001645840    0x240  at 0x7f6facd30c25
0x0000000001645a90    0x240  at 0x7f6facd30c25
0x0000000001645ce0    0x240  at 0x7f6facd30c25
0x0000000001645f30    0x240  at 0x7f6facd30c25
0x0000000001646180    0x240  at 0x7f6facd30c25
0x00000000016463d0    0x240  at 0x7f6facd30c25
0x0000000001646620    0x240  at 0x7f6facd30c25
0x0000000001646870    0x240  at 0x7f6facd30c25
0x0000000001646ac0    0x240  at 0x7f6facd30c25
0x0000000001646d10    0x240  at 0x7f6facd30c25
0x0000000001646f60    0x240  at 0x7f6facd30c25
0x00000000016471b0    0x240  at 0x7f6facd30c25

All 20 threads are not freed at 0x7f6facd30c25. However, the instruction note 
on piazza says that we can ignore this problem. Since we are not dynamically 
allocated any memory in func.c, we are not responsible for this memory leakage
problem.
