
Use `$gcc -c -[flags] testovf.c` to compile the testovf function,
then use `objdump -d testovf.o` to disassemble the object code into assembly code.
 
With -O2:
0000000000000000 <testovf>:
   0:   31 c0                   xor    %eax,%eax
   2:   c3                      retq

Description:
What the source code want to do is to get the result of LONG_MAX+LONG_MAX<LONG_MAX,
since LONG_MAX is the maximum number for a 64-bit register can store, if the compiler
just do the addition then compare, there will be an integer overflow and the result
will be 1(true).
When compiling with -O2, the compiler recognize the potential overflow and avoid it
by using xor instruction and return zero, which is the correct result.


With -O2 -fsanitize=undefined:

0000000000000000 <testovf>:
   0:		 55			push   %rbp
   1:		 53                   	push   %rbx
   2:		 48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
   9:		 ff ff 7f 
   c:		 48 83 ec 08		sub    $0x8,%rsp
  10:		 48 8b 1d 00 00 00 00 	mov    0x0(%rip),%rbx        # 17 <testovf+0x17>
  17:		 48 89 dd             	mov    %rbx,%rbp
  1a:		 48 01 d5             	add    %rdx,%rbp
  1d:		 70 0d                	jo     2c <testovf+0x2c>
  1f:		 48 39 eb             	cmp    %rbp,%rbx
  22:		 0f 9f c0             	setg   %al
  25:		 48 83 c4 08          	add    $0x8,%rsp
  29:		 5b                   	pop    %rbx
  2a:		 5d                   	pop    %rbp
  2b:		 c3                   	retq   
  2c:		 48 89 de             	mov    %rbx,%rsi
  2f:		 bf 00 00 00 00       	mov    $0x0,%edi
  34:		 e8 00 00 00 00       	callq  39 <testovf+0x39>
  39:		 eb e4                	jmp    1f <testovf+0x1f>

Description:
The meaning of -fsanitize=undefined flag is that it enables a fast undefined behavior
detector to call library functions to handle the detected undefine behaviors.
In this code, the call happens at offset 34. When we look at the assembly language
code which is compiled with `$gcc -s -O2 -fsanitize=undefined testovf.c`, we can see
that the called function name is __ubsan_handle_add_overflow. Thus, when the overflow
happens, the code will jump to offset 34 from 1d and call the library function, then 
jump back to offset 1f to continue the comparison.  If the overflow does not happen,
it wil do the comparison normally. The result will be 0.


With -O2 -fwrapv:

0000000000000000 <testovf>:
   0:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 7 <testovf+0x7>
   7:   48 ba ff ff ff ff ff    movabs $0x7fffffffffffffff,%rdx
   e:   ff ff 7f
  11:   48 01 c2                add    %rax,%rdx
  14:   48 39 d0                cmp    %rdx,%rax
  17:   0f 9f c0                setg   %al
  1a:   c3                      retq

Description:
This method allows the overflow to wrap around without any overflow warning. 
It does the direct addition and compare the overflowed result with LONG_MAX,
thus the result will be 1.
